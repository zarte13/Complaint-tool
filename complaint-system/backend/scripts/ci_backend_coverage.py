#!/usr/bin/env python3
"""
Summarize and enforce backend coverage in CI.
- Reads coverage.xml (generated by pytest --cov-report=xml)
- Appends a summary to GITHUB_STEP_SUMMARY (if available)
- Fails the build if thresholds are not met
"""

import os
import sys
import xml.etree.ElementTree as ET


COVERAGE_XML = "coverage.xml"
MIN_LINES = float(os.environ.get("MIN_LINES", "85"))
MIN_BRANCHES = float(os.environ.get("MIN_BRANCHES", "85"))


def main() -> int:
    if not os.path.exists(COVERAGE_XML):
        print(f"{COVERAGE_XML} not found. Ensure pytest produced coverage.xml")
        return 1

    try:
        root = ET.parse(COVERAGE_XML).getroot()
    except Exception as e:
        print(f"Failed to parse {COVERAGE_XML}: {e}")
        return 1

    # Cobertura XML top-level contains line-rate and branch-rate attributes
    line_rate = float(root.attrib.get("line-rate", 0)) * 100
    branch_rate = float(root.attrib.get("branch-rate", 0)) * 100

    summary = f"Lines: {line_rate:.2f}%\nBranches: {branch_rate:.2f}%\n"
    print(summary.strip())

    # Write to GitHub Step Summary if available
    step_summary = os.environ.get("GITHUB_STEP_SUMMARY")
    if step_summary:
        try:
            with open(step_summary, "a", encoding="utf-8") as f:
                f.write("\n## Backend Coverage Summary\n")
                f.write(summary)
        except Exception as e:
            print(f"Warning: failed to write step summary: {e}")

    # Threshold enforcement
    failures = []
    if line_rate < MIN_LINES:
        failures.append(f"Lines {line_rate:.2f}% < {MIN_LINES}%")
    if branch_rate < MIN_BRANCHES:
        failures.append(f"Branches {branch_rate:.2f}% < {MIN_BRANCHES}%")

    if failures:
        print("Coverage threshold not met: " + "; ".join(failures))
        return 1

    print("Coverage thresholds met")
    return 0


if __name__ == "__main__":
    sys.exit(main())